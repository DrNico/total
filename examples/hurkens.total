(* 

  Hurkens' paradox

  from A. Hurkens, A simplification of Girard's paradox.

  Adapted from:
    https://github.com/UlfNorell/agda/blob/master/test/succeed/Hurkens.agda

*)


Definition bottom := forall (A : Type), A.

Definition not : Type -> Type := fun (A : Type) => A -> bottom.

Definition P := fun (A : Type) =>  A -> Type.

Definition U := forall (X : Type), (P (P X) -> X) -> P (P X).

Definition tau : (P (P U) -> U) := fun(t : P (P U)) => 
  fun (X : Type)(f : P (P X) -> X) (p : P X) => 
    t (fun (x : U) => p (f (x X f))).

Definition sigma : U -> P (P U) := fun (s : U) =>
  s U (fun (t : P (P U)) => tau t).

Definition Delta : P U := fun (y : U) =>
  not (forall (p : P U), sigma y p -> p (tau (sigma y))).

Definition Omega : U := 
  tau (fun (p : P U) => forall (x : U), sigma x p -> p x).

Definition D : Type :=
  forall (p : P U), sigma Omega p -> p (tau (sigma Omega)).

Definition lemma-1 : forall (p : P U), (forall (x : U), sigma x p -> p x) -> p Omega :=
  fun (p : P U) (H1 : forall (y : U), sigma y p -> p y) => H1 Omega (fun (x : U) => H1 (tau (sigma x))).

Definition lemma-2 : not D :=
  lemma-1 Delta (fun (x : U) (H2 : sigma x Delta) (H3 : forall (p1 : P U), sigma x p1 -> p1 (tau (sigma x))) => 
    H3 Delta H2 (fun (p : P U) => 
      H3 (fun (y : U) => 
        p (tau (sigma y))))).

Definition lemma-3 : D :=
  fun (p : P U) => lemma-1 
    (fun (y : U) => 
      p (tau (sigma y))).


Definition loop : bottom := lemma-2 lemma-3.